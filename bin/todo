#!/usr/bin/python

import os
import sys
from sqlite3 import dbapi2 as sqlite

class Todo:

	def __init__(self):
		self.options = None
		self.args = None
		self.findFile()

	def findFile(self):
		self.file = os.getenv("TODOFILE")
		if self.file is None:
			platform = sys.platform
			self.file  = os.path.join( os.path.expanduser("~"), "todo.db")

	def main(self):
		from optparse import OptionParser
		usage="usage: %prog [options] command\n\nCommands:"
		cmds=[]
		for x in dir(self):
			if x[:4]=='CMD_':
				usage="%s\n  %-21s %s" % (usage,x[4:],eval('self.%s.__doc__' % x))
		parser = OptionParser(usage)

		parser.add_option("-c", "--context", dest="context", metavar="CX",
            help="Context")

		parser.add_option("-f", "--file", dest="file", metavar="F",
            help="Database filename (default=%s)" % self.file)

		parser.add_option("-n", "--name", dest="name",
            help="Task name",default=None)

		parser.add_option("-p", "--parent", dest="parentId", metavar="PID",
            help="Task ID of parent task")

		parser.add_option("-s", "--status", dest="status", default='open',
			metavar="ST",
			help="Status - default: 'open'. When selecting: 'all' for all tasks.")

		parser.add_option("-t", "--task", dest="task",
			help="Task id")

		(self.options, self.args) = parser.parse_args()
		if self.options.file != None:
			self.file = self.options.file

		# Now go do something
		if len(self.args) != 1:
			self.executeGUI()
		else:
			self.executeCMD()

	def executeCMD(self):
		# TODO: Verify the database is good here

		s='self.CMD_'+self.args[0]+'()'
		try:
			eval(s)
		except (AttributeError):
			print("that is not a command")

	def executeGUI(self):
		print("The GUI should start. For now, use these cmds.")

	def CMD_addcontext(self):
		"""Add a task to a context: -t TASK -c CONTEXT"""
		t=(self.options.context, self.options.task)

		if self.options.context == None or self.options.task == None:
			print "you must give a context and a task id"
			sys.exit(1)

		conn = sqlite.connect(self.file)
		c = conn.cursor()
		c.execute("insert into context (context,taskId) values (?,?)",t)
		conn.commit()
		c.close()

	def CMD_addtask(self):
		"""Add a new task: -n NAME [-p PID]"""
		t=(self.options.name, self.options.parentId)

		if self.options.name == None:
			print "you must give a name"
			sys.exit(1)

		conn = sqlite.connect(self.file)
		c = conn.cursor()
		c.execute("insert into task (name,parentId,status) values (?,?,'open')",t)
		conn.commit()
		print 'added task #%s' % c.lastrowid
		c.close()

	def CMD_editstatus(self):
		"""Edit status of the task: -t TASK -s STATUS"""
		t=( self.options.status, self.options.task )

		if self.options.task==None:
			print "you must choose an id"
			sys.exit(1)

		if self.options.status==None:
			print "you must choose a status"
			sys.exit(1)

		conn = sqlite.connect(self.file)
		c = conn.cursor()
		c.execute("update task set status=? where _id=?",t)
		conn.commit()
		c.close()

	def CMD_showcontasks(self):
		"""Show tasks in context: [-s STATUS] [-c CONTEXT]"""
		t=[]
		sql = "select * from task,context where task._id = context.taskId"
		if self.options.status != 'all':
			sql = sql+" and task.status=?"
			t.append(self.options.status)
		if self.options.context != None:
			sql = sql+" and context.context=?"
			t.append(self.options.context)
		sql = sql+" order by context.context,task._id"
		
		conn = sqlite.connect(self.file)
		conn.row_factory = sqlite.Row
		c = conn.cursor()
		c.execute(sql,t)
		lastContext = None
		for r in c:
			if lastContext != r['context']:
				print r['context']
				lastContext = r['context']
			print "   %s (%s)" % (r['name'],r['_id'])

	def CMD_showcontexts(self):
		"""Show contexts w/ task counts: [-s STATUS] [-c CONTEXT]"""
		t=[]
		sql = "select context.context as context, count(task._id) as tasks from task,context where task._id = context.taskId"
		if self.options.status != 'all':
			sql = sql+" and task.status=?"
			t.append(self.options.status)
		if self.options.context != None:
			sql = sql+" and context.context=?"
			t.append(self.options.context)
		sql = sql+" group by context.context"

		conn = sqlite.connect(self.file)
		conn.row_factory = sqlite.Row
		c = conn.cursor()
		c.execute(sql,t)
		for r in c:
			print "%s (%s)" % (r['context'],r['tasks'])

	def CMD_showtasks(self):
		"""Show the selected tasks: [-s STATUS] [-t TASK]"""
		t=[]
		sql = "select * from task where _id > '0'"
		if self.options.status != 'all':
			sql = sql+"and status=?"
			t.append(self.options.status)
		if self.options.task != None:
			sql = sql+"and _id=? or parentId=?"
			t.append(self.options.task)
			t.append(self.options.task)

		conn = sqlite.connect(self.file)
		conn.row_factory = sqlite.Row
		c = conn.cursor()
		c.execute(sql,t)
		print "%s tasks" % self.options.status
		for r in c:
			pid = r['parentId']
			if pid==None:
				pid=""
			if self.options.status == 'all':
				print "%5s %5s %-10s %-50s" % (r['_id'],pid,r['status'],r['name'])
			else:
				print "%5s %5s %-50s" % (r['_id'],pid,r['name'])


if __name__ == '__main__':
	todo = Todo()
	todo.main()
