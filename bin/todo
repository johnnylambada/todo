#!/usr/bin/python

import os
import sys
from sqlite3 import dbapi2 as sqlite

class Task:
	def __init__(self, id, name, status):
		self.id = id
		self.name = name
		self.status = status
		self.kids = []
		self.contexts = []

class Todo:

	def __init__(self):
		self.options = None
		self.args = None
		self.findDefaultFile()

	def findDefaultFile(self):
		"""Find the default file name. self.file may be changed by -f opt """
		self.file = os.getenv("TODOFILE")
		if self.file is None:
			self.file  = os.path.join( os.path.expanduser("~"), "todo.db")

	def loadTasks(self, pid):
		"""Load the tasks from the database"""

		t=[]
		sql = "select * from task where _id > '0'"
		if pid == None:
			sql = sql+" and parentId is null"
		else:
			sql = sql+" and parentId=?"
			t.append(pid)

		conn = sqlite.connect(self.file)
		conn.row_factory = sqlite.Row
		c = conn.cursor()
		c.execute(sql,t)

		tasks=[]
		for r in c:
			task=Task(r['_id'], r['name'], r['status'])
			task.kids = self.loadTasks(r['_id'])
			task.contexts = self.loadTaskContexts(r['_id'])
			tasks.append(task)

		return tasks
		
	def loadTaskContexts(self, pid):
		"""Load the contexts for this task from the database"""

		contexts=[]

		t=[]
		t.append(pid)
		sql = "select context from context where taskId=?"
		conn = sqlite.connect(self.file)
		conn.row_factory = sqlite.Row
		c = conn.cursor()
		c.execute(sql,t)
		for r in c:
			contexts.append(r['context'])
		c.close()

		return contexts

	def main(self):
		from optparse import OptionParser
		usage="usage: %prog [options] command\n\nCommands:"
		cmds=[]
		for x in dir(self):
			if x[:4]=='CMD_':
				usage="%s\n  %-21s %s" % \
					(usage,x[4:],eval('self.%s.__doc__' % x))
		parser = OptionParser(usage)

		parser.add_option("-c", "--context", dest="context", metavar="CX",
            help="Context")

		parser.add_option("-d", "--depth", dest="deep", metavar="D",
            help="Depth of tasks: 'all' for all tasks.")

		parser.add_option("-f", "--file", dest="file", metavar="F",
            help="Database filename (default=%s)" % self.file)

		parser.add_option("-n", "--name", dest="name",
            help="Task name",default=None)

		parser.add_option("-p", "--parent", dest="parentId", metavar="PID",
            help="Task ID of parent task")

		parser.add_option("-s", "--status", dest="status", default='open',
			metavar="ST",
			help="Status. Default:'open'. When selecting: 'all' for all tasks.")

		parser.add_option("-t", "--task", dest="task",
			help="Task id")

		(self.options, self.args) = parser.parse_args()
		if self.options.file != None:
			self.file = self.options.file

		# Now go do something
		if len(self.args) != 1:
			self.executeGUI()
		else:
			self.executeCMD()

	def executeCMD(self):

		s='self.CMD_'+self.args[0]+'()'
		try:
			eval(s)
		except (AttributeError):
			print("that is not a command")

	def executeGUI(self):
		print("If it existed, the GUI should start. For now, use the CLI.")

	def CMD_addcontext(self):
		"""Add a task to a context: -t TASK -c CONTEXT"""
		t=(self.options.context, self.options.task)

		if self.options.context == None or self.options.task == None:
			print "you must give a context and a task id"
			sys.exit(1)

		conn = sqlite.connect(self.file)
		c = conn.cursor()
		c.execute("insert into context (context,taskId) values (?,?)",t)
		conn.commit()
		c.close()

	def CMD_addtask(self):
		"""Add a new task: -n NAME [-p PID]"""
		t=(self.options.name, self.options.parentId)

		if self.options.name == None:
			print "you must give a name"
			sys.exit(1)

		sql = "insert into task (name,parentId,status) values (?,?,'open')"
		conn = sqlite.connect(self.file)
		c = conn.cursor()
		c.execute(sql, t)
		conn.commit()
		newtask = c.lastrowid
		print 'added task #%s' % newtask
		c.close()

		if self.options.context != None:
			self.options.task = newtask
			self.CMD_addcontext()

	def CMD_editname(self):
		"""Edit name of the task: -t TASK -n NAME"""
		t=( self.options.name, self.options.task )

		if self.options.task==None:
			print "you must choose an id"
			sys.exit(1)

		if self.options.name==None:
			print "you must give an updated name"
			sys.exit(1)

		conn = sqlite.connect(self.file)
		c = conn.cursor()
		c.execute("update task set name=? where _id=?",t)
		conn.commit()
		c.close()

	def CMD_editparent(self):
		"""Edit parent of the task: -t TASK -s PID"""
		t=( self.options.parentId, self.options.task )

		if self.options.task==None:
			print "you must choose an id"
			sys.exit(1)

		if self.options.parentId==None:
			print "you must choose a parent ID"
			sys.exit(1)

		conn = sqlite.connect(self.file)
		c = conn.cursor()
		c.execute("update task set parentId=? where _id=?",t)
		conn.commit()
		c.close()

	def CMD_editstatus(self):
		"""Edit status of the task: -t TASK -s STATUS"""
		t=( self.options.status, self.options.task )

		if self.options.task==None:
			print "you must choose an id"
			sys.exit(1)

		if self.options.status==None:
			print "you must choose a status"
			sys.exit(1)

		conn = sqlite.connect(self.file)
		c = conn.cursor()
		c.execute("update task set status=? where _id=?",t)
		conn.commit()
		c.close()

	def CMD_newtodo(self):
		"""Create a new todo file."""

		conn = sqlite.connect(self.file)
		c = conn.cursor()
		c.execute("""
CREATE TABLE context (
    "_id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "context" TEXT,
    "taskId" INTEGER
);
""")
		c.execute("""
CREATE TABLE task (
    "_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "name" TEXT,
    "status" TEXT,
    "parentId" INTEGER
);
""")
		conn.commit()
		c.close()

	def CMD_showcontasks(self):
		"""Show tasks in context: [-s STATUS] [-c CONTEXT]"""
		t=[]
		sql = "select * from task,context where task._id = context.taskId"
		if self.options.status != 'all':
			sql = sql+" and task.status=?"
			t.append(self.options.status)
		if self.options.context != None:
			sql = sql+" and context.context=?"
			t.append(self.options.context)
		sql = sql+" order by context.context,task._id"
		
		conn = sqlite.connect(self.file)
		conn.row_factory = sqlite.Row
		c = conn.cursor()
		c.execute(sql,t)
		lastContext = None
		for r in c:
			if lastContext != r['context']:
				print r['context']
				lastContext = r['context']
			print "   %s (%s)" % (r['name'],r['_id'])

	def CMD_showcontexts(self):
		"""Show contexts w/ task counts: [-s STATUS] [-c CONTEXT]"""
		t=[]
		sql = """
select context, count(task._id) as tasks 
from task,context where task._id = taskId
"""
		if self.options.status != 'all':
			sql = sql+" and task.status=?"
			t.append(self.options.status)
		if self.options.context != None:
			sql = sql+" and context.context=?"
			t.append(self.options.context)
		sql = sql+" group by context.context"

		conn = sqlite.connect(self.file)
		conn.row_factory = sqlite.Row
		c = conn.cursor()
		c.execute(sql,t)
		for r in c:
			print "%s (%s)" % (r['context'],r['tasks'])

	def CMD_showtasks(self):
		"""Show the selected tasks: [-s STATUS] [-t TASK] [-d DEEP]"""
		print "************************"
		print "THE -d OPTION IS BROKEN!"
		print "************************"
		self.showtasks(0,self.loadTasks(None))

	def showtasks(self, indent, tasks):
		d = int(self.options.deep)
		for t in tasks:
			self.showtask(indent, t)
			if d != None and ( d=='all' or d==indent ):
				self.showtasks(indent+1, t.kids)

	def showtask(self, indent, task):
		if self.options.status == 'all':
			print "%4d %-10s %s- %s" % \
				(task.id, task.status, "".ljust(indent*2), task.name)
		if self.options.status == task.status:
			print "%4d %s- %s" % (task.id, "".ljust(indent*2), task.name)

if __name__ == '__main__':
	todo = Todo()
	todo.main()
